// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/brand/create-brand": {
            "post": {
                "description": "Creates a new brand with the given name and logo path",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Create a new brand",
                "parameters": [
                    {
                        "description": "Brand data",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.V1BrandDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns created brand ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/create-model": {
            "post": {
                "description": "Creates a new brand model with the given name and logo path",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand Model"
                ],
                "summary": "Create a new brand model",
                "parameters": [
                    {
                        "description": "Brand Model data",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.V1BrandModelDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns created model ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/delete-brand": {
            "delete": {
                "description": "Deletes a brand by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a brand",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand ID to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Brand not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/delete-model": {
            "delete": {
                "description": "Deletes a brand model by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand Model"
                ],
                "summary": "Delete a brand model",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand Model ID to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "brand model deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Brand Model not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/get-brands": {
            "get": {
                "description": "Get a paginated list of brands with optional search",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Get all brands",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of brands to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search string to filter brands by name",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of brands with pagination info",
                        "schema": {
                            "$ref": "#/definitions/models.BrandResult"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/get-models": {
            "get": {
                "description": "Get a paginated list of brand models with optional search",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand Model"
                ],
                "summary": "Get all brand models",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of brand models to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search string to filter brand models or brands by name",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of brand models with pagination info",
                        "schema": {
                            "$ref": "#/definitions/models.BrandModelResult"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/update-brand": {
            "put": {
                "description": "Updates brand details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand"
                ],
                "summary": "Update an existing brand",
                "parameters": [
                    {
                        "description": "Brand data with ID",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.V1BrandDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns updated brand ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/update-model": {
            "put": {
                "description": "Updates brand model details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Brand Model"
                ],
                "summary": "Update an existing brand model",
                "parameters": [
                    {
                        "description": "Brand Model data with ID",
                        "name": "brand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.V1BrandModelDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns updated brand model ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/brand/upload-image": {
            "post": {
                "description": "Uploads an image file and returns the file path",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload Image"
                ],
                "summary": "Upload an image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the uploaded image path Successfully"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.V1BrandDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "logo_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dtos.V1BrandModelDTO": {
            "type": "object",
            "properties": {
                "brand_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "logo_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Brand": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "logo_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.BrandModel": {
            "type": "object",
            "properties": {
                "brand_id": {
                    "type": "integer"
                },
                "brand_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logo_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.BrandModelResult": {
            "type": "object",
            "properties": {
                "brand_models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BrandModel"
                    }
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "models.BrandResult": {
            "type": "object",
            "properties": {
                "brands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Brand"
                    }
                },
                "count": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "Other services"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "3.0.0",
	Host:             "",
	BasePath:         "/autotm-admin",
	Schemes:          []string{"http", "https"},
	Title:            "AutoTM-Admin",
	Description:      "AutoTM-Admin swagger",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
